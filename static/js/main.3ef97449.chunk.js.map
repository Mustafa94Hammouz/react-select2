{"version":3,"sources":["components/List/List.js","components/Search/Search.js","components/chips/chips.js","App.js","serviceWorker.js","index.js"],"names":["List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedUsers","selectUser","bind","assertThisInitialized","user","some","item","_this2","checkIfSelected","index","indexOf","splice","setState","concat","toConsumableArray","_this3","react_default","a","createElement","className","id","query","filteredUsers","length","map","onClick","value","key","Component","Search","filterUsers","e","users","filter","toLowerCase","search","target","type","onChange","name","placeholder","Chips","handleDelete","deletingChip","Paper_default","Chip_default","icon","Face_default","label","onDelete","color","App","getQuery","chips_chips","components_Search_Search","components_List_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ef97449.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './List.css';\r\nclass List extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectedUsers: [],\r\n        };\r\n        this.selectUser = this.selectUser.bind(this);\r\n    }\r\n\r\n    checkIfSelected(user) {\r\n        return this.state.selectedUsers.some(item => user === item);\r\n    }\r\n\r\n    selectUser(user){\r\n        const {selectedUsers} = this.state;\r\n        if(this.checkIfSelected(user)) {\r\n            let index = selectedUsers.indexOf(user);\r\n            selectedUsers.splice(index,1);\r\n            this.setState({\r\n                selectedUsers: selectedUsers\r\n            },()=>this.props.selectedUsers(this.state.selectedUsers));\r\n        }else{\r\n            this.setState({\r\n                selectedUsers: [...selectedUsers,user]\r\n            },()=>this.props.selectedUsers(this.state.selectedUsers));\r\n        }\r\n    }\r\n    render() {\r\n        const filtered = () => (this.props.filteredUsers.map((user, index)=>(\r\n            <li className={this.checkIfSelected(user) ? 'selected' : ''} onClick={()=>this.selectUser(user)} value={user} key={ index }> { user } </li>\r\n        )));\r\n\r\n        const noResults = () => (<p id='noResults'> NO RESULTS !</p>);\r\n\r\n\r\n\r\n        return (\r\n            <div className='listContainer' id='style-2'>\r\n                {this.props.query ==='' ? null  : this.props.filteredUsers.length < 1 && this.props.query !== '' ? noResults() : filtered()}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport './Search.css';\r\n\r\nclass Search extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            filteredUsers:[]\r\n        };\r\n        this.filterUsers = this.filterUsers.bind(this);\r\n    }\r\n\r\n    filterUsers(e){\r\n        let filteredUsers = this.props.users;\r\n        filteredUsers = filteredUsers.filter(function(item){\r\n            return item.toLowerCase().search(\r\n                e.target.value.toLowerCase()) !== -1;\r\n        });\r\n        this.setState({filteredUsers: filteredUsers},()=> {\r\n            this.props.filteredUsers(filteredUsers);\r\n        });\r\n        this.props.query( e.target.value.toLowerCase());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input className='input' type='text' onChange={this.filterUsers} value={this.state.name} placeholder=\"UserName\" />\r\n               );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import Paper from \"@material-ui/core/Paper/Paper\";\r\nimport Chip from \"@material-ui/core/Chip/Chip\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React, { Component } from 'react';\r\nimport './chips.css';\r\n\r\nclass Chips extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    handleDelete(e){\r\n        this.props.deletingChip(e);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <Paper className='chipsContainer'>\r\n                    {this.props.selectedUsers.map((user, index) => {\r\n                        return (\r\n                            <Chip\r\n                                className='chip'\r\n                                key={index}\r\n                                icon={<FaceIcon/>}\r\n                                label={user}\r\n                                onDelete={()=>this.handleDelete(user)}\r\n                                color={\"secondary\"}\r\n\r\n                            />\r\n                        );\r\n                    })}\r\n                </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chips;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport List from \"./components/List/List\";\nimport Search from \"./components/Search/Search\";\nimport Chips from \"./components/chips/chips\";\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            users:['Mustafa', 'Wajid','Hamzah', 'Zaareer', 'Ahmad', 'Rayyan', 'Imad', 'Georg', 'Alaska'],\n            filteredUsers:[],\n            query:'',\n            selectedUsers:[]\n        };\n        this.filteredUsers = this.filteredUsers.bind(this);\n        this.getQuery = this.getQuery.bind(this);\n        this.selectedUsers = this.selectedUsers.bind(this);\n        this.deletingChip = this.deletingChip.bind(this);\n    }\n\n    filteredUsers(users){\n        this.setState({\n            filteredUsers: users\n        })\n    }\n    getQuery(query){\n        this.setState({\n            query: query\n        })\n    }\n    selectedUsers(selectedUsers){\n        this.setState({\n            selectedUsers: selectedUsers\n        })\n    }\n\n    deletingChip(user){\n        const {selectedUsers} = this.state;\n        let index = this.state.selectedUsers.indexOf(user);\n        selectedUsers.splice(index,1);\n        this.setState({\n            selectedUsers: selectedUsers\n        })\n    }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className='App-header'>\n            <div className='container'>\n\n                <div className=\"textArea\">\n           <Chips selectedUsers={this.state.selectedUsers} deletingChip={this.deletingChip}/>\n           <Search users={this.state.users} filteredUsers={this.filteredUsers} query={this.getQuery} selectedUsers={this.state.selectedUsers}/>\n                </div>\n            <List users={this.state.users} selectedUsers={this.selectedUsers} filteredUsers={this.state.filteredUsers} query={this.state.query}/>\n            </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}